/*
 * Developed by Ji Sungbin 2024.
 *
 * Licensed under the MIT.
 * Please see full license: https://github.com/jisungbin/androidx-aosp-viewer/blob/trunk/LICENSE
 */

package land.sungbin.androidx.fetcher

import java.io.IOException
import kotlin.coroutines.CoroutineContext
import okhttp3.internal.cache.DiskLruCache
import okio.Buffer
import okio.ByteString
import okio.Source
import okio.buffer
import org.jetbrains.annotations.VisibleForTesting

// :::Caching Note:::
// OkHttp's built-in cache works based on Cache-Control. However, we want semi-persistent cache
// behaviour that is independent of Cache-Control, so we code our own.
public data class RemoteCachingContext(
  @VisibleForTesting internal val cache: DiskLruCache?,
  internal val enabled: Boolean = true,
) : CoroutineContext.Element {
  init {
    if (enabled) {
      requireNotNull(cache) { "Cache is enabled but cache is null." }
    }
  }

  override val key: CoroutineContext.Key<RemoteCachingContext> get() = Key

  internal fun getCachedSource(ref: String): Source? {
    val cache = checkNotNull(cache) { "Cache is null." }

    // Since the Source generated by DiskLruCache is close() sensitive, we use a copy
    // for ease of use.
    val candidateCache = cache[ref]?.getSource(ENTRY_BODY)?.use { source ->
      Buffer().apply { writeAll(source) }
    }
    if (candidateCache != null) return candidateCache

    return null
  }

  internal fun putSource(ref: String, source: ByteString): Boolean {
    val cache = checkNotNull(cache) { "Cache is null." }
    var editor: DiskLruCache.Editor? = null
    return try {
      editor = cache.edit(ref) ?: return false
      editor.newSink(ENTRY_BODY).buffer().use { it.write(source) }
      editor.commit()
      true
    } catch (_: IOException) {
      try {
        editor?.abort()
      } catch (_: IOException) {
      }
      false
    }
  }

  public companion object Key : CoroutineContext.Key<RemoteCachingContext> {
    internal const val ENTRY_BODY = 0
    public const val ENTRY_SIZE: Int = 1

    public const val CACHE_VERSION: Int = 1
  }
}
